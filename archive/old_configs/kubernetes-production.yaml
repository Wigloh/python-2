# üèóÔ∏è D√©ploiement Kubernetes Complet MSPR
# Version production-ready avec PostgreSQL, Flask et OpenFaaS

---
# Namespace principal
apiVersion: v1
kind: Namespace
metadata:
  name: mspr-system
  labels:
    name: mspr-system

---
# Secret PostgreSQL
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: mspr-system
type: Opaque
stringData:
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "MSPR2025PostgreSQL"
  POSTGRES_DB: "cofrap"

---
# Secret de chiffrement
apiVersion: v1
kind: Secret
metadata:
  name: encryption-secret
  namespace: mspr-system
type: Opaque
stringData:
  FERNET_KEY: "ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg="

---
# ConfigMap pour la configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mspr-config
  namespace: mspr-system
data:
  app_name: "MSPR Production"
  issuer_name: "MSPR Security System"
  flask_env: "production"

---
# PVC pour PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: mspr-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# D√©ploiement PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: mspr-system
  labels:
    app: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:13
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_DB
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgresql-storage
        persistentVolumeClaim:
          claimName: postgresql-pvc
      - name: init-script
        configMap:
          name: postgresql-init

---
# Service PostgreSQL
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: mspr-system
spec:
  selector:
    app: postgresql
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP

---
# ConfigMap pour l'initialisation PostgreSQL
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init
  namespace: mspr-system
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(255) UNIQUE NOT NULL,
        password TEXT NOT NULL,
        secret_2fa TEXT,
        gendate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expired BOOLEAN DEFAULT FALSE,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
    CREATE INDEX IF NOT EXISTS idx_users_expired ON users(expired);

---
# D√©ploiement Flask App
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspr-flask-app
  namespace: mspr-system
  labels:
    app: mspr-flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mspr-flask-app
  template:
    metadata:
      labels:
        app: mspr-flask-app
    spec:
      containers:
      - name: flask-app
        image: python:3.11-slim
        command: ["/bin/bash"]
        args: ["-c", "pip install flask psycopg2-binary cryptography pyotp qrcode pillow python-dateutil requests && python /app/app_complete.py"]
        env:
        - name: DB_HOST
          value: "postgresql-service"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_DB
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: POSTGRES_PASSWORD
        - name: FERNET_KEY
          valueFrom:
            secretKeyRef:
              name: encryption-secret
              key: FERNET_KEY
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: mspr-config
              key: flask_env
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
      - name: app-code
        configMap:
          name: flask-app-code

---
# Service Flask App
apiVersion: v1
kind: Service
metadata:
  name: mspr-flask-service
  namespace: mspr-system
spec:
  selector:
    app: mspr-flask-app
  ports:
    - port: 80
      targetPort: 5000
  type: LoadBalancer

---
# Ingress (optionnel)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mspr-ingress
  namespace: mspr-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: mspr.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mspr-flask-service
            port:
              number: 80

---
# HorizontalPodAutoscaler pour Flask
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mspr-flask-hpa
  namespace: mspr-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mspr-flask-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
