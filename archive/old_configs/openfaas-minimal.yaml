# ðŸš€ OpenFaaS Deployment pour MSPR
apiVersion: v1
kind: Namespace
metadata:
  name: openfaas
  labels:
    role: openfaas-system
    access: openfaas-system
    istio-injection: enabled
---
apiVersion: v1
kind: Namespace
metadata:
  name: openfaas-fn
  labels:
    istio-injection: enabled
    role: openfaas-fn
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: openfaas
    component: gateway
  name: openfaas-gateway
  namespace: openfaas
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: openfaas
    component: controller
  name: openfaas-controller
  namespace: openfaas
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openfaas
    component: gateway
  name: gateway
  namespace: openfaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      annotations:
        prometheus.io.scrape: "true"
        prometheus.io.port: "8082"
      labels:
        app: gateway
    spec:
      serviceAccountName: openfaas-gateway
      volumes:
      - name: faas-netes-temp-volume
        emptyDir: {}
      containers:
      - name: gateway
        resources:
          limits:
            memory: 120Mi
          requests:
            memory: 120Mi
        image: openfaas/gateway:0.25.4
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          timeoutSeconds: 5
        env:
        - name: read_timeout
          value: "65s"
        - name: write_timeout
          value: "65s"
        - name: upstream_timeout
          value: "60s"
        - name: functions_provider_url
          value: "http://127.0.0.1:8081/"
        - name: direct_functions
          value: "true"
        - name: direct_functions_suffix
          value: "openfaas-fn.svc.cluster.local"
        - name: function_namespace
          value: openfaas-fn
        - name: faas_nats_address
          value: "nats.openfaas.svc.cluster.local"
        - name: faas_nats_port
          value: "4222"
        - name: auth_proxypassbody
          value: "false"
        - name: secret_mount_path
          value: "/var/secrets"
        - name: scale_from_zero
          value: "true"
        - name: max_idle_conns
          value: "1024"
        - name: max_idle_conns_per_host
          value: "32"
        volumeMounts:
        - name: faas-netes-temp-volume
          mountPath: /tmp
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openfaas
    component: gateway
  name: gateway
  namespace: openfaas
spec:
  type: NodePort
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
      nodePort: 31112
  selector:
    app: gateway
---
# Basic auth pour OpenFaaS
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
  namespace: openfaas
type: Opaque
data:
  basic-auth-user: YWRtaW4=  # admin
  basic-auth-password: YWRtaW4=  # admin
---
# Fonction create-user
apiVersion: apps/v1
kind: Deployment
metadata:
  name: create-user
  namespace: openfaas-fn
  labels:
    faas_function: create-user
    uid: "1000"
spec:
  replicas: 1
  selector:
    matchLabels:
      faas_function: create-user
  template:
    metadata:
      labels:
        faas_function: create-user
        uid: "1000"
      annotations:
        prometheus.io.scrape: "false"
    spec:
      containers:
      - name: create-user
        image: openfaas/classic-watchdog:0.2.1
        imagePullPolicy: Always
        env:
        - name: fprocess
          value: "python3 handler.py"
        - name: cgi_headers
          value: "true"
        - name: mode
          value: "http"
        - name: upstream_url
          value: "http://127.0.0.1:8000"
        - name: DB_HOST
          value: "host.docker.internal"  # Pour accÃ©der Ã  PostgreSQL depuis le container
        - name: DB_NAME
          value: "cofrap"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "password"
        resources:
          limits:
            memory: 128Mi
          requests:
            memory: 128Mi
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /_/health
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /_/health
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: create-user
  namespace: openfaas-fn
  labels:
    faas_function: create-user
spec:
  type: ClusterIP
  selector:
    faas_function: create-user
  ports:
    - name: http
      port: 8080
      targetPort: 8080
