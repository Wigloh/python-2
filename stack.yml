# Configuration OpenFaaS pour les handlers MSPR
# ‚úÖ CONFIGURATION √âDUCATIVE - Valeurs fixes int√©gr√©es dans le code

version: 1.0
provider:
  name: openfaas
  gateway: http://localhost:8080  # Gateway OpenFaaS local

functions:
  create-user:
    lang: python3
    handler: ./create-user
    image: create-user:latest
    # ‚úÖ Plus besoin de variables d'environnement - Configuration en dur dans le code
    # environment:
    #   DB_HOST: localhost
    #   DB_NAME: cofrap
    #   DB_PASSWORD: mspr2024
    # secrets:
    #   - postgresql-secret
    #   - encryption-secret
    limits:
      memory: "256Mi"
      cpu: "200m"
    requests:
      memory: "128Mi"
      cpu: "100m"

  login-user:
    lang: python3
    handler: ./login-user
    image: login-user:latest
    # ‚úÖ Plus besoin de variables d'environnement - Configuration en dur dans le code
    # environment:
    #   DB_HOST: localhost
    #   DB_NAME: cofrap
    #   DB_PASSWORD: mspr2024
    # secrets:
    #   - postgresql-secret
    #   - encryption-secret
    limits:
      memory: "256Mi"
      cpu: "200m"
    requests:
      memory: "128Mi"
      cpu: "100m"

  generate-2fa:
    lang: python3
    handler: ./generate-2fa
    image: generate-2fa:latest
    # ‚úÖ Plus besoin de variables d'environnement - Configuration en dur dans le code
    # environment:
    #   DB_HOST: localhost
    #   DB_NAME: cofrap
    #   DB_PASSWORD: mspr2024
    #   APP_NAME: "MSPR App"
    #   ISSUER_NAME: "MSPR Security"
    # secrets:
    #   - postgresql-secret
    #   - encryption-secret
    limits:
      memory: "256Mi"
      cpu: "200m"
    requests:
      memory: "128Mi"
      cpu: "100m"

# ‚úÖ CONFIGURATION √âDUCATIVE SIMPLIFI√âE
# Plus besoin de secrets Kubernetes - Tout est en dur dans le code

# üìù COMMANDES DE D√âPLOIEMENT SIMPLIFI√âES :

# 1. Construire les fonctions OpenFaaS
# faas-cli build -f stack.yml

# 2. D√©ployer les fonctions
# faas-cli deploy -f stack.yml

# 3. Tester les fonctions (exemples)
# curl -X POST http://localhost:8080/function/create-user \
#   -H "Content-Type: application/json" \
#   -d '{"username": "test.user"}'

# curl -X POST http://localhost:8080/function/login-user \
#   -H "Content-Type: application/json" \
#   -d '{"username": "test.user", "password": "generated_password", "totp_code": "123456"}'

# curl -X POST http://localhost:8080/function/generate-2fa \
#   -H "Content-Type: application/json" \
#   -d '{"username": "test.user"}'
#   -d '{"username": "testuser"}'
